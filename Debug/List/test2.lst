
AVRASM ver. 2.1.30  C:\Users\Asus\Desktop\cable_tester\test2\Debug\List\test2.asm Tue Aug 19 17:49:04 2025

C:\Users\Asus\Desktop\cable_tester\test2\Debug\List\test2.asm(1088): warning: Register r5 already defined by the .DEF directive
C:\Users\Asus\Desktop\cable_tester\test2\Debug\List\test2.asm(1089): warning: Register r4 already defined by the .DEF directive
C:\Users\Asus\Desktop\cable_tester\test2\Debug\List\test2.asm(1090): warning: Register r7 already defined by the .DEF directive
C:\Users\Asus\Desktop\cable_tester\test2\Debug\List\test2.asm(1091): warning: Register r6 already defined by the .DEF directive
C:\Users\Asus\Desktop\cable_tester\test2\Debug\List\test2.asm(1092): warning: Register r9 already defined by the .DEF directive
C:\Users\Asus\Desktop\cable_tester\test2\Debug\List\test2.asm(1093): warning: Register r8 already defined by the .DEF directive
C:\Users\Asus\Desktop\cable_tester\test2\Debug\List\test2.asm(1094): warning: Register r11 already defined by the .DEF directive
C:\Users\Asus\Desktop\cable_tester\test2\Debug\List\test2.asm(1095): warning: Register r12 already defined by the .DEF directive
C:\Users\Asus\Desktop\cable_tester\test2\Debug\List\test2.asm(1096): warning: Register r13 already defined by the .DEF directive
C:\Users\Asus\Desktop\cable_tester\test2\Debug\List\test2.asm(1097): warning: Register r10 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16A
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16A
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _port_vlaue=R5
                 	.DEF _Menue_Main_Num=R4
                 	.DEF _Menu_Cable_Define_Prof=R7
                 	.DEF _Menu_Cable_Define_Index_In=R6
                 	.DEF _Menu_Cable_Define_Index_Out=R9
                 	.DEF _Menu_Cable_Define_Index_In_Num=R8
                 	.DEF _Menu_Cable_Define_Index_Out_Num=R11
                 	.DEF _Read_Pin_B=R12
                 	.DEF _Read_Pin_B_msb=R13
                 	.DEF __lcd_x=R10
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 00a9 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 00f2 	JMP  _timer0_ovf_isr
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 00d6 	JMP  _ext_int2_isr
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0000
000034 0000      	.DB  0x0,0x0,0x0,0x0
000035 0000
000036 0000      	.DB  0x0,0x0,0x0,0x0
000037 0000      	.DB  0x0,0x0
                 
                 _0x20003:
000038 6554
000039 7473
00003a 5220
00003b 6e75      	.DB  0x54,0x65,0x73,0x74,0x20,0x52,0x75,0x6E
00003c 0000
00003d 0000
00003e 0000
00003f 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000040 6143
000041 6c62
000042 2065
000043 6553      	.DB  0x43,0x61,0x62,0x6C,0x65,0x20,0x53,0x65
000044 656c
000045 7463
000046 0000
000047 0000      	.DB  0x6C,0x65,0x63,0x74,0x0,0x0,0x0,0x0
000048 6143
000049 6c62
00004a 2065
00004b 6564      	.DB  0x43,0x61,0x62,0x6C,0x65,0x20,0x64,0x65
00004c 6966
00004d 656e
00004e 0000
00004f 0000      	.DB  0x66,0x69,0x6E,0x65,0x0,0x0,0x0,0x0
000050 6241
000051 756f
000052 2074
000053 654d      	.DB  0x41,0x62,0x6F,0x75,0x74,0x20,0x4D,0x65
                 _0x20000:
000054 3e2d
000055 7325
000056 2d00
000057 203e      	.DB  0x2D,0x3E,0x25,0x73,0x0,0x2D,0x3E,0x20
000058 6163
000059 6c62
00005a 2565
00005b 3230      	.DB  0x63,0x61,0x62,0x6C,0x65,0x25,0x30,0x32
00005c 0064
00005d 3025
00005e 6432
00005f 3e2d      	.DB  0x64,0x0,0x25,0x30,0x32,0x64,0x2D,0x3E
000060 3025
000061 6432
000062 2020
000063 5020      	.DB  0x25,0x30,0x32,0x64,0x20,0x20,0x20,0x50
000064 6f72
000065 3d66
000066 3025
000067 6432      	.DB  0x72,0x6F,0x66,0x3D,0x25,0x30,0x32,0x64
000068 2000
000069 205e
00006a 2020
00006b 2020      	.DB  0x0,0x20,0x5E,0x20,0x20,0x20,0x20,0x20
00006c 2020
00006d 2020
00006e 2020
00006f 2020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
000070 2020
000071 2000
000072 2020
000073 2020      	.DB  0x20,0x20,0x0,0x20,0x20,0x20,0x20,0x20
000074 205e
000075 2020
000076 2020
000077 2020      	.DB  0x5E,0x20,0x20,0x20,0x20,0x20,0x20,0x20
000078 2020
000079 2020
00007a 2000
00007b 2020      	.DB  0x20,0x20,0x20,0x20,0x0,0x20,0x20,0x20
00007c 2020
00007d 2020
00007e 2020
00007f 2020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
000080 2020
000081 2020
000082 005e
000083 4320      	.DB  0x20,0x20,0x20,0x20,0x5E,0x0,0x20,0x43
000084 6261
000085 656c
000086 5420
000087 7365      	.DB  0x61,0x62,0x6C,0x65,0x20,0x54,0x65,0x73
000088 2074
000089 2556
00008a 3230
00008b 2064      	.DB  0x74,0x20,0x56,0x25,0x30,0x32,0x64,0x20
00008c 2000
00008d 2020
00008e 2020
00008f 4e20      	.DB  0x0,0x20,0x20,0x20,0x20,0x20,0x20,0x4E
000090 4353
000091 2020
000092 2020
000093 2020      	.DB  0x53,0x43,0x20,0x20,0x20,0x20,0x20,0x20
C:\Users\Asus\Desktop\cable_tester\test2\Debug\List\test2.asm(1165): warning: .cseg .db misalignment - padding zero byte
000094 0000      	.DB  0x0
                 _0x2020060:
C:\Users\Asus\Desktop\cable_tester\test2\Debug\List\test2.asm(1167): warning: .cseg .db misalignment - padding zero byte
000095 0001      	.DB  0x1
                 _0x2020000:
000096 4e2d
000097 4e41
000098 4900
000099 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\Asus\Desktop\cable_tester\test2\Debug\List\test2.asm(1170): warning: .cseg .db misalignment - padding zero byte
00009a 0000      	.DB  0x0
                 _0x2060003:
00009b c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00009c 000a      	.DW  0x0A
00009d 0004      	.DW  0x04
00009e 0066      	.DW  __REG_VARS*2
                 
00009f 0038      	.DW  0x38
0000a0 024f      	.DW  _Menue_Main_Srting
0000a1 0070      	.DW  _0x20003*2
                 
0000a2 0001      	.DW  0x01
0000a3 029f      	.DW  __seed_G101
0000a4 012a      	.DW  _0x2020060*2
                 
0000a5 0002      	.DW  0x02
0000a6 02a3      	.DW  __base_y_G103
0000a7 0136      	.DW  _0x2060003*2
                 
                 _0xFFFFFFFF:
0000a8 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
0000a9 94f8      	CLI
0000aa 27ee      	CLR  R30
0000ab bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0000ac e0f1      	LDI  R31,1
0000ad bffb      	OUT  GICR,R31
0000ae bfeb      	OUT  GICR,R30
0000af bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
0000b0 e08d      	LDI  R24,(14-2)+1
0000b1 e0a2      	LDI  R26,2
0000b2 27bb      	CLR  R27
                 __CLEAR_REG:
0000b3 93ed      	ST   X+,R30
0000b4 958a      	DEC  R24
0000b5 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000b6 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000b7 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000b8 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
0000b9 93ed      	ST   X+,R30
0000ba 9701      	SBIW R24,1
0000bb f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000bc e3e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000bd e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000be 9185      	LPM  R24,Z+
0000bf 9195      	LPM  R25,Z+
0000c0 9700      	SBIW R24,0
0000c1 f061      	BREQ __GLOBAL_INI_END
0000c2 91a5      	LPM  R26,Z+
0000c3 91b5      	LPM  R27,Z+
0000c4 9005      	LPM  R0,Z+
0000c5 9015      	LPM  R1,Z+
0000c6 01bf      	MOVW R22,R30
0000c7 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000c8 9005      	LPM  R0,Z+
0000c9 920d      	ST   X+,R0
0000ca 9701      	SBIW R24,1
0000cb f7e1      	BRNE __GLOBAL_INI_LOOP
0000cc 01fb      	MOVW R30,R22
0000cd cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000ce e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000cf bfed      	OUT  SPL,R30
0000d0 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000d1 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000d2 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000d3 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000d4 940c 0127 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include "cable.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <mega16a.h>
                 ;#include "Menu_Functions.h"
                 ;#include "button_function.h"
                 ;#include <delay.h>
                 ;
                 ;
                 ;
                 ;//Declare your global variables here
                 ;void write_port(uint8_t);
                 ;uint8_t port_vlaue;
                 ;void Delay(uint32_t);
                 ;void Cable_Check(void);
                 ;void Menu(void);
                 ;uint8_t read_PIN(void);
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;interrupt [EXT_INT2] void ext_int2_isr(void)
                 ; 0000 001D {
                 
                 	.CSEG
                 _ext_int2_isr:
                 ; .FSTART _ext_int2_isr
0000d6 93ea      	ST   -Y,R30
0000d7 b7ef      	IN   R30,SREG
0000d8 93ea      	ST   -Y,R30
                 ; 0000 001E 
                 ; 0000 001F   if(PINB.3==1)
0000d9 9bb3      	SBIS 0x16,3
0000da c005      	RJMP _0x3
                 ; 0000 0020   {
                 ; 0000 0021     flags_b.enter=1;
0000db 91e0 024e 	LDS  R30,_flags_b
0000dd 60e1      	ORI  R30,1
0000de 93e0 024e 	STS  _flags_b,R30
                 ; 0000 0022   }
                 ; 0000 0023 
                 ; 0000 0024   if(PINB.5==1)
                 _0x3:
0000e0 9bb5      	SBIS 0x16,5
0000e1 c005      	RJMP _0x4
                 ; 0000 0025   {
                 ; 0000 0026     flags_b.up=1;
0000e2 91e0 024e 	LDS  R30,_flags_b
0000e4 60e2      	ORI  R30,2
0000e5 93e0 024e 	STS  _flags_b,R30
                 ; 0000 0027   }
                 ; 0000 0028   if(PINB.4==1)
                 _0x4:
0000e7 9bb4      	SBIS 0x16,4
0000e8 c005      	RJMP _0x5
                 ; 0000 0029   {
                 ; 0000 002A     flags_b.down=1;
0000e9 91e0 024e 	LDS  R30,_flags_b
0000eb 60e4      	ORI  R30,4
0000ec 93e0 024e 	STS  _flags_b,R30
                 ; 0000 002B   }
                 ; 0000 002C 
                 ; 0000 002D }
                 _0x5:
0000ee 91e9      	LD   R30,Y+
0000ef bfef      	OUT  SREG,R30
0000f0 91e9      	LD   R30,Y+
0000f1 9518      	RETI
                 ; .FEND
                 ;
                 ;
                 ;
                 ;// Timer 0 overflow interrupt service routine
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 0033 {
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
0000f2 920a      	ST   -Y,R0
0000f3 921a      	ST   -Y,R1
0000f4 92fa      	ST   -Y,R15
0000f5 936a      	ST   -Y,R22
0000f6 937a      	ST   -Y,R23
0000f7 938a      	ST   -Y,R24
0000f8 939a      	ST   -Y,R25
0000f9 93aa      	ST   -Y,R26
0000fa 93ba      	ST   -Y,R27
0000fb 93ea      	ST   -Y,R30
0000fc 93fa      	ST   -Y,R31
0000fd b7ef      	IN   R30,SREG
0000fe 93ea      	ST   -Y,R30
                 ; 0000 0034 // Reinitialize Timer 0 value
                 ; 0000 0035 TCNT0=0x64;
0000ff e6e4      	LDI  R30,LOW(100)
000100 bfe2      	OUT  0x32,R30
                 ; 0000 0036 // Place your code here
                 ; 0000 0037 switch (page)
000101 91e0 024d 	LDS  R30,_page
000103 e0f0      	LDI  R31,0
                 ; 0000 0038 {
                 ; 0000 0039     case MAIN_PAGE:
000104 30e4      	CPI  R30,LOW(0x4)
000105 e0a0      	LDI  R26,HIGH(0x4)
000106 07fa      	CPC  R31,R26
000107 f411      	BRNE _0x9
                 ; 0000 003A         Menu_Main();
000108 d070      	RCALL _Menu_Main
                 ; 0000 003B         break;
000109 c00f      	RJMP _0x8
                 ; 0000 003C     case RUN_TEST_PAGE:
                 _0x9:
00010a 9730      	SBIW R30,0
00010b f411      	BRNE _0xA
                 ; 0000 003D         Menu_Cable_Select();
00010c d08c      	RCALL _Menu_Cable_Select
                 ; 0000 003E         break;
00010d c00b      	RJMP _0x8
                 ; 0000 003F     case CABLE_SELSECT_PAGE:
                 _0xA:
00010e 30e1      	CPI  R30,LOW(0x1)
00010f e0a0      	LDI  R26,HIGH(0x1)
000110 07fa      	CPC  R31,R26
000111 f411      	BRNE _0xB
                 ; 0000 0040         Menu_Cable_Define();
000112 d0af      	RCALL _Menu_Cable_Define
                 ; 0000 0041         break;
000113 c005      	RJMP _0x8
                 ; 0000 0042     case ABOUT_ME_PAGE:
                 _0xB:
000114 30e3      	CPI  R30,LOW(0x3)
000115 e0a0      	LDI  R26,HIGH(0x3)
000116 07fa      	CPC  R31,R26
000117 f409      	BRNE _0x8
                 ; 0000 0043         Menu_About_Me();
000118 d11d      	RCALL _Menu_About_Me
                 ; 0000 0044         break;
                 ; 0000 0045 }
                 _0x8:
                 ; 0000 0046 
                 ; 0000 0047 }
000119 91e9      	LD   R30,Y+
00011a bfef      	OUT  SREG,R30
00011b 91f9      	LD   R31,Y+
00011c 91e9      	LD   R30,Y+
00011d 91b9      	LD   R27,Y+
00011e 91a9      	LD   R26,Y+
00011f 9199      	LD   R25,Y+
000120 9189      	LD   R24,Y+
000121 9179      	LD   R23,Y+
000122 9169      	LD   R22,Y+
000123 90f9      	LD   R15,Y+
000124 9019      	LD   R1,Y+
000125 9009      	LD   R0,Y+
000126 9518      	RETI
                 ; .FEND
                 ;
                 ;
                 ;void main(void)
                 ; 0000 004B 
                 ; 0000 004C {
                 _main:
                 ; .FSTART _main
                 ; 0000 004D // Declare your local variables here
                 ; 0000 004E 
                 ; 0000 004F In_profile[1][0] = 0x01;
000127 e0e1      	LDI  R30,LOW(1)
                +
000128 93e0 0168+STS _In_profile + ( 8 ) , R30
                 	__PUTB1MN _In_profile,8
                 ; 0000 0050 In_profile[1][1] = 0x02;
00012a e0e2      	LDI  R30,LOW(2)
                +
00012b 93e0 0169+STS _In_profile + ( 9 ) , R30
                 	__PUTB1MN _In_profile,9
                 ; 0000 0051 In_profile[1][2] = 0x04;
00012d e0e4      	LDI  R30,LOW(4)
                +
00012e 93e0 016a+STS _In_profile + ( 10 ) , R30
                 	__PUTB1MN _In_profile,10
                 ; 0000 0052 In_profile[1][3] = 0x08;
000130 e0e8      	LDI  R30,LOW(8)
                +
000131 93e0 016b+STS _In_profile + ( 11 ) , R30
                 	__PUTB1MN _In_profile,11
                 ; 0000 0053 In_profile[1][4] = 0x10;
000133 e1e0      	LDI  R30,LOW(16)
                +
000134 93e0 016c+STS _In_profile + ( 12 ) , R30
                 	__PUTB1MN _In_profile,12
                 ; 0000 0054 In_profile[1][5] = 0x20;
000136 e2e0      	LDI  R30,LOW(32)
                +
000137 93e0 016d+STS _In_profile + ( 13 ) , R30
                 	__PUTB1MN _In_profile,13
                 ; 0000 0055 In_profile[1][6] = 0x40;
000139 e4e0      	LDI  R30,LOW(64)
                +
00013a 93e0 016e+STS _In_profile + ( 14 ) , R30
                 	__PUTB1MN _In_profile,14
                 ; 0000 0056 In_profile[1][7] = 0x80;
00013c e8e0      	LDI  R30,LOW(128)
                +
00013d 93e0 016f+STS _In_profile + ( 15 ) , R30
                 	__PUTB1MN _In_profile,15
                 ; 0000 0057 
                 ; 0000 0058 Out_profile[1][0] = 0x01;
00013f e0e1      	LDI  R30,LOW(1)
                +
000140 93e0 01c8+STS _Out_profile + ( 8 ) , R30
                 	__PUTB1MN _Out_profile,8
                 ; 0000 0059 Out_profile[1][0] = 0x02;
000142 e0e2      	LDI  R30,LOW(2)
                +
000143 93e0 01c8+STS _Out_profile + ( 8 ) , R30
                 	__PUTB1MN _Out_profile,8
                 ; 0000 005A Out_profile[1][0] = 0x04;
000145 e0e4      	LDI  R30,LOW(4)
                +
000146 93e0 01c8+STS _Out_profile + ( 8 ) , R30
                 	__PUTB1MN _Out_profile,8
                 ; 0000 005B Out_profile[1][0] = 0x08;
000148 e0e8      	LDI  R30,LOW(8)
                +
000149 93e0 01c8+STS _Out_profile + ( 8 ) , R30
                 	__PUTB1MN _Out_profile,8
                 ; 0000 005C Out_profile[1][0] = 0x10;
00014b e1e0      	LDI  R30,LOW(16)
                +
00014c 93e0 01c8+STS _Out_profile + ( 8 ) , R30
                 	__PUTB1MN _Out_profile,8
                 ; 0000 005D Out_profile[1][0] = 0x20;
00014e e2e0      	LDI  R30,LOW(32)
                +
00014f 93e0 01c8+STS _Out_profile + ( 8 ) , R30
                 	__PUTB1MN _Out_profile,8
                 ; 0000 005E Out_profile[1][0] = 0x40;
000151 e4e0      	LDI  R30,LOW(64)
                +
000152 93e0 01c8+STS _Out_profile + ( 8 ) , R30
                 	__PUTB1MN _Out_profile,8
                 ; 0000 005F Out_profile[1][0] = 0x80;
000154 e8e0      	LDI  R30,LOW(128)
                +
000155 93e0 01c8+STS _Out_profile + ( 8 ) , R30
                 	__PUTB1MN _Out_profile,8
                 ; 0000 0060 
                 ; 0000 0061 
                 ; 0000 0062 
                 ; 0000 0063 
                 ; 0000 0064 
                 ; 0000 0065 
                 ; 0000 0066 
                 ; 0000 0067 //Out_profile[1] = {0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80};
                 ; 0000 0068 // Input/Output Ports initialization
                 ; 0000 0069 // Port A initialization
                 ; 0000 006A // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 006B DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
000157 e0e0      	LDI  R30,LOW(0)
000158 bbea      	OUT  0x1A,R30
                 ; 0000 006C // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 006D PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
000159 bbeb      	OUT  0x1B,R30
                 ; 0000 006E 
                 ; 0000 006F // Port B initialization
                 ; 0000 0070 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0071 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
00015a bbe7      	OUT  0x17,R30
                 ; 0000 0072 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0073 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
00015b bbe8      	OUT  0x18,R30
                 ; 0000 0074 
                 ; 0000 0075 // Port C initialization
                 ; 0000 0076 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0077 DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
00015c efef      	LDI  R30,LOW(255)
00015d bbe4      	OUT  0x14,R30
                 ; 0000 0078 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0079 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
00015e e0e0      	LDI  R30,LOW(0)
00015f bbe5      	OUT  0x15,R30
                 ; 0000 007A 
                 ; 0000 007B // Port D initialization
                 ; 0000 007C // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 007D DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
000160 bbe1      	OUT  0x11,R30
                 ; 0000 007E // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 007F PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
000161 bbe2      	OUT  0x12,R30
                 ; 0000 0080  // External Interrupt(s) initialization
                 ; 0000 0081 // INT0: Off
                 ; 0000 0082 // INT1: Off
                 ; 0000 0083 // INT2: On
                 ; 0000 0084 // INT2 Mode: Falling Edge
                 ; 0000 0085 GICR|=(0<<INT1) | (0<<INT0) | (1<<INT2);
000162 b7eb      	IN   R30,0x3B
000163 62e0      	ORI  R30,0x20
000164 bfeb      	OUT  0x3B,R30
                 ; 0000 0086 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
000165 e0e0      	LDI  R30,LOW(0)
000166 bfe5      	OUT  0x35,R30
                 ; 0000 0087 MCUCSR=(0<<ISC2);
000167 bfe4      	OUT  0x34,R30
                 ; 0000 0088 GIFR=(0<<INTF1) | (0<<INTF0) | (1<<INTF2);
000168 e2e0      	LDI  R30,LOW(32)
000169 bfea      	OUT  0x3A,R30
                 ; 0000 0089 
                 ; 0000 008A 
                 ; 0000 008B 
                 ; 0000 008C // Timer/Counter 0 initialization
                 ; 0000 008D // Clock source: System Clock
                 ; 0000 008E // Clock value: 31.250 kHz
                 ; 0000 008F // Mode: Normal top=0xFF
                 ; 0000 0090 // OC0 output: Disconnected
                 ; 0000 0091 // Timer Period: 4.992 ms
                 ; 0000 0092 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (1<<CS02) | (0<<CS01) | (0<<CS00);
00016a e0e4      	LDI  R30,LOW(4)
00016b bfe3      	OUT  0x33,R30
                 ; 0000 0093 TCNT0=0x64;
00016c e6e4      	LDI  R30,LOW(100)
00016d bfe2      	OUT  0x32,R30
                 ; 0000 0094 OCR0=0x00;
00016e e0e0      	LDI  R30,LOW(0)
00016f bfec      	OUT  0x3C,R30
                 ; 0000 0095 
                 ; 0000 0096 
                 ; 0000 0097 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0098 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
000170 e0e1      	LDI  R30,LOW(1)
000171 bfe9      	OUT  0x39,R30
                 ; 0000 0099 DDRB.0=1;
000172 9ab8      	SBI  0x17,0
                 ; 0000 009A lcd_init(16);
000173 e1a0      	LDI  R26,LOW(16)
000174 940e 0488 	CALL _lcd_init
                 ; 0000 009B // Global enable interrupts
                 ; 0000 009C #asm("sei")
000176 9478      	sei
                 ; 0000 009D while (1)
                 _0xF:
                 ; 0000 009E {
                 ; 0000 009F 
                 ; 0000 00A0 }
000177 cfff      	RJMP _0xF
                 ; 0000 00A1 }
                 _0x12:
000178 cfff      	RJMP _0x12
                 ; .FEND
                 ;
                 ;void write_port(uint8_t In_value){
                 ; 0000 00A3 void write_port(uint8_t In_value){
                 ; 0000 00A4 
                 ; 0000 00A5 
                 ; 0000 00A6 PORTC = In_value;
                 ;	In_value -> Y+0
                 ; 0000 00A7 
                 ; 0000 00A8 }
                 ;
                 ;void Delay(uint32_t T){
                 ; 0000 00AA void Delay(uint32_t T){
                 ; 0000 00AB 
                 ; 0000 00AC delay_ms(T);
                 ;	T -> Y+0
                 ; 0000 00AD 
                 ; 0000 00AE }
                 ;
                 ;uint8_t read_PIN(void){
                 ; 0000 00B0 uint8_t read_PIN(void){
                 ; 0000 00B1 
                 ; 0000 00B2 return PIND;
                 ; 0000 00B3 
                 ; 0000 00B4 }
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;#include "Menu_Functions.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include "cable.h"
                 ;char Menue_Main_Srting[4][16]={"Test Run" , "Cable Select" , "Cable define" , "About Me"};
                 
                 	.DSEG
                 ;char lcd_buffer[16];
                 ;uint8_t Menue_Main_Num=0;
                 ;int8_t Menue_Cable_Select_Num=0;
                 ;uint8_t Menu_Cable_Define_Prof=0;
                 ;uint8_t Menu_Cable_Define_Index_In=0;
                 ;uint8_t Menu_Cable_Define_Index_Out=0;
                 ;uint8_t Menu_Cable_Define_Index_In_Num=0;
                 ;uint8_t Menu_Cable_Define_Index_Out_Num=0;
                 ;struct FLAGS_MENU flags_menu;
                 ;uint8_t page=0;
                 ;int8_t Menu_Main (void)
                 ; 0001 000F {
                 
                 	.CSEG
                 _Menu_Main:
                 ; .FSTART _Menu_Main
                 ; 0001 0010 	lcd_gotoxy(0,0);
000179 940e 04b7 	CALL SUBOPT_0x0
                 ; 0001 0011 	sprintf(lcd_buffer,"->%s",Menue_Main_Srting[Menue_Main_Num]);
                +
00017b eae8     +LDI R30 , LOW ( 2 * _0x20000 + ( 0 ) )
00017c e0f0     +LDI R31 , HIGH ( 2 * _0x20000 + ( 0 ) )
                 	__POINTW1FN _0x20000,0
00017d 93fa      	ST   -Y,R31
00017e 93ea      	ST   -Y,R30
00017f 2de4      	MOV  R30,R4
000180 e0f0      	LDI  R31,0
000181 940e 04c1 	CALL SUBOPT_0x1
                 ; 0001 0012 	lcd_puts(lcd_buffer);
                 ; 0001 0013 	lcd_gotoxy(0,1);
000183 940e 04d1 	CALL SUBOPT_0x2
                 ; 0001 0014 	sprintf(lcd_buffer,"%s",Menue_Main_Srting[Menue_Main_Num+1]);
                +
000185 eaea     +LDI R30 , LOW ( 2 * _0x20000 + ( 2 ) )
000186 e0f0     +LDI R31 , HIGH ( 2 * _0x20000 + ( 2 ) )
                 	__POINTW1FN _0x20000,2
000187 93fa      	ST   -Y,R31
000188 93ea      	ST   -Y,R30
000189 2de4      	MOV  R30,R4
00018a e0f0      	LDI  R31,0
00018b 9631      	ADIW R30,1
00018c 940e 04c1 	CALL SUBOPT_0x1
                 ; 0001 0015 	lcd_puts(lcd_buffer);
                 ; 0001 0016 	memset(lcd_buffer,0,sizeof(lcd_buffer));
00018e 940e 04db 	CALL SUBOPT_0x3
                 ; 0001 0017 	if(flag.enter_button==1)
000190 f439      	BRNE _0x20004
                 ; 0001 0018 	{
                 ; 0001 0019 		flag.enter_button=0;
000191 91e0 0222 	LDS  R30,_flag
000193 7fe7      	ANDI R30,0XF7
000194 93e0 0222 	STS  _flag,R30
                 ; 0001 001A 		return Menue_Main_Num;
000196 2de4      	MOV  R30,R4
000197 9508      	RET
                 ; 0001 001B 	}
                 ; 0001 001C 	return -1;
                 _0x20004:
000198 c027      	RJMP _0x20C0005
                 ; 0001 001D }
                 ; .FEND
                 ;
                 ;int8_t  Menu_Cable_Select(void)
                 ; 0001 0020 {
                 _Menu_Cable_Select:
                 ; .FSTART _Menu_Cable_Select
                 ; 0001 0021 	lcd_gotoxy(0,0);
000199 940e 04b7 	CALL SUBOPT_0x0
                 ; 0001 0022 	sprintf(lcd_buffer,"-> cable%02d",Menue_Cable_Select_Num);
                +
00019b eaed     +LDI R30 , LOW ( 2 * _0x20000 + ( 5 ) )
00019c e0f0     +LDI R31 , HIGH ( 2 * _0x20000 + ( 5 ) )
                 	__POINTW1FN _0x20000,5
00019d 93fa      	ST   -Y,R31
00019e 93ea      	ST   -Y,R30
00019f 91e0 024b 	LDS  R30,_Menue_Cable_Select_Num
0001a1 940e 0567 	CALL __CBD1
0001a3 940e 04ea 	CALL SUBOPT_0x4
                 ; 0001 0023 	lcd_puts(lcd_buffer);
                 ; 0001 0024 	lcd_gotoxy(0,1);
0001a5 940e 04d1 	CALL SUBOPT_0x2
                 ; 0001 0025 	sprintf(lcd_buffer,"cable%02d",Menue_Cable_Select_Num+1);
                +
0001a7 ebe0     +LDI R30 , LOW ( 2 * _0x20000 + ( 8 ) )
0001a8 e0f0     +LDI R31 , HIGH ( 2 * _0x20000 + ( 8 ) )
                 	__POINTW1FN _0x20000,8
0001a9 93fa      	ST   -Y,R31
0001aa 93ea      	ST   -Y,R30
0001ab 91e0 024b 	LDS  R30,_Menue_Cable_Select_Num
0001ad e0f0      	LDI  R31,0
0001ae fde7      	SBRC R30,7
0001af efff      	SER  R31
0001b0 9631      	ADIW R30,1
0001b1 940e 056d 	CALL __CWD1
0001b3 940e 04ea 	CALL SUBOPT_0x4
                 ; 0001 0026 	lcd_puts(lcd_buffer);
                 ; 0001 0027 	memset(lcd_buffer,0,sizeof(lcd_buffer));
0001b5 940e 04db 	CALL SUBOPT_0x3
                 ; 0001 0028 	if(flag.enter_button==1)
0001b7 f441      	BRNE _0x20005
                 ; 0001 0029 	{
                 ; 0001 002A 		flag.enter_button=0;
0001b8 91e0 0222 	LDS  R30,_flag
0001ba 7fe7      	ANDI R30,0XF7
0001bb 93e0 0222 	STS  _flag,R30
                 ; 0001 002B 		return Menue_Cable_Select_Num;
0001bd 91e0 024b 	LDS  R30,_Menue_Cable_Select_Num
0001bf 9508      	RET
                 ; 0001 002C 	}
                 ; 0001 002D 	return -1;
                 _0x20005:
                 _0x20C0005:
0001c0 efef      	LDI  R30,LOW(255)
0001c1 9508      	RET
                 ; 0001 002E }
                 ; .FEND
                 ;
                 ;void Menu_Cable_Define(void)
                 ; 0001 0031 {
                 _Menu_Cable_Define:
                 ; .FSTART _Menu_Cable_Define
                 ; 0001 0032 	lcd_gotoxy(0,0);
0001c2 e0e0      	LDI  R30,LOW(0)
0001c3 93ea      	ST   -Y,R30
0001c4 e0a0      	LDI  R26,LOW(0)
0001c5 940e 0441 	CALL _lcd_gotoxy
                 ; 0001 0033 	In_profile[Menu_Cable_Define_Prof][Menu_Cable_Define_Index_In]=Menu_Cable_Define_Index_In_Num;
0001c7 940e 04f4 	CALL SUBOPT_0x5
0001c9 5ae0      	SUBI R30,LOW(-_In_profile)
0001ca 4ffe      	SBCI R31,HIGH(-_In_profile)
0001cb 01df      	MOVW R26,R30
0001cc 2de6      	MOV  R30,R6
0001cd e0f0      	LDI  R31,0
0001ce 0fea      	ADD  R30,R26
0001cf 1ffb      	ADC  R31,R27
0001d0 8280      	ST   Z,R8
                 ; 0001 0034 	Out_profile[Menu_Cable_Define_Prof][Menu_Cable_Define_Index_Out]=Menu_Cable_Define_Index_Out_Num;
0001d1 940e 04f4 	CALL SUBOPT_0x5
0001d3 54e0      	SUBI R30,LOW(-_Out_profile)
0001d4 4ffe      	SBCI R31,HIGH(-_Out_profile)
0001d5 01df      	MOVW R26,R30
0001d6 2de9      	MOV  R30,R9
0001d7 e0f0      	LDI  R31,0
0001d8 0fea      	ADD  R30,R26
0001d9 1ffb      	ADC  R31,R27
0001da 82b0      	ST   Z,R11
                 ; 0001 0035 	sprintf(lcd_buffer,"%02d->%02d   Prof=%02d",In_profile[Menu_Cable_Define_Prof][Menu_Cable_Define_Index_In],Out_profile[ ...
0001db 940e 04f9 	CALL SUBOPT_0x6
                +
0001dd ebea     +LDI R30 , LOW ( 2 * _0x20000 + ( 18 ) )
0001de e0f0     +LDI R31 , HIGH ( 2 * _0x20000 + ( 18 ) )
                 	__POINTW1FN _0x20000,18
0001df 93fa      	ST   -Y,R31
0001e0 93ea      	ST   -Y,R30
0001e1 940e 04f4 	CALL SUBOPT_0x5
0001e3 5ae0      	SUBI R30,LOW(-_In_profile)
0001e4 4ffe      	SBCI R31,HIGH(-_In_profile)
0001e5 01df      	MOVW R26,R30
0001e6 27ee      	CLR  R30
0001e7 0da6      	ADD  R26,R6
0001e8 1fbe      	ADC  R27,R30
0001e9 940e 04fe 	CALL SUBOPT_0x7
0001eb 940e 04f4 	CALL SUBOPT_0x5
0001ed 54e0      	SUBI R30,LOW(-_Out_profile)
0001ee 4ffe      	SBCI R31,HIGH(-_Out_profile)
0001ef 01df      	MOVW R26,R30
0001f0 27ee      	CLR  R30
0001f1 0da9      	ADD  R26,R9
0001f2 1fbe      	ADC  R27,R30
0001f3 940e 04fe 	CALL SUBOPT_0x7
0001f5 2de7      	MOV  R30,R7
0001f6 27ff      	CLR  R31
0001f7 2766      	CLR  R22
0001f8 2777      	CLR  R23
0001f9 940e 057a 	CALL __PUTPARD1
0001fb e08c      	LDI  R24,12
0001fc 940e 03c4 	CALL _sprintf
0001fe 9660      	ADIW R28,16
                 ; 0001 0036 	lcd_puts(lcd_buffer);
0001ff e8af      	LDI  R26,LOW(_lcd_buffer)
000200 e0b2      	LDI  R27,HIGH(_lcd_buffer)
000201 940e 0477 	CALL _lcd_puts
                 ; 0001 0037 	memset(lcd_buffer,0,sizeof(lcd_buffer));
000203 940e 04f9 	CALL SUBOPT_0x6
000205 940e 0505 	CALL SUBOPT_0x8
                 ; 0001 0038 	lcd_gotoxy(0,1);
000207 e0e0      	LDI  R30,LOW(0)
000208 93ea      	ST   -Y,R30
000209 e0a1      	LDI  R26,LOW(1)
00020a 940e 0441 	CALL _lcd_gotoxy
                 ; 0001 0039 	switch (flags_menu.subpage)
00020c 91e0 024c 	LDS  R30,_flags_menu
00020e e0f0      	LDI  R31,0
00020f 70e7      	ANDI R30,LOW(0x7)
000210 70f0      	ANDI R31,HIGH(0x7)
000211 ffe2      	SBRS R30,2
000212 c002      	RJMP _0x20009
000213 6fe8      	ORI  R30,LOW(0xFFF8)
000214 6fff      	ORI  R31,HIGH(0xFFF8)
                 _0x20009:
                 ; 0001 003A 	{
                 ; 0001 003B 	case IN_SELECT:
000215 30e2      	CPI  R30,LOW(0x2)
000216 e0a0      	LDI  R26,HIGH(0x2)
000217 07fa      	CPC  R31,R26
000218 f439      	BRNE _0x2000A
                 ; 0001 003C 		sprintf(lcd_buffer," ^               ");
000219 940e 04f9 	CALL SUBOPT_0x6
                +
00021b ede1     +LDI R30 , LOW ( 2 * _0x20000 + ( 41 ) )
00021c e0f0     +LDI R31 , HIGH ( 2 * _0x20000 + ( 41 ) )
                 	__POINTW1FN _0x20000,41
00021d 940e 050b 	CALL SUBOPT_0x9
                 ; 0001 003D 		break;
00021f c015      	RJMP _0x20008
                 ; 0001 003E 	case OUT_SELECT:
                 _0x2000A:
000220 30e3      	CPI  R30,LOW(0x3)
000221 e0a0      	LDI  R26,HIGH(0x3)
000222 07fa      	CPC  R31,R26
000223 f439      	BRNE _0x2000B
                 ; 0001 003F 		lcd_gotoxy(0,1);
000224 940e 04d1 	CALL SUBOPT_0x2
                 ; 0001 0040 		sprintf(lcd_buffer,"     ^           ");
                +
000226 eee3     +LDI R30 , LOW ( 2 * _0x20000 + ( 59 ) )
000227 e0f0     +LDI R31 , HIGH ( 2 * _0x20000 + ( 59 ) )
                 	__POINTW1FN _0x20000,59
000228 940e 050b 	CALL SUBOPT_0x9
                 ; 0001 0041 	    break;
00022a c00a      	RJMP _0x20008
                 ; 0001 0042 	case PROF_SELECT:
                 _0x2000B:
00022b 30e4      	CPI  R30,LOW(0x4)
00022c e0a0      	LDI  R26,HIGH(0x4)
00022d 07fa      	CPC  R31,R26
00022e f431      	BRNE _0x2000D
                 ; 0001 0043 		sprintf(lcd_buffer,"               ^");
00022f 940e 04f9 	CALL SUBOPT_0x6
                +
000231 efe5     +LDI R30 , LOW ( 2 * _0x20000 + ( 77 ) )
000232 e0f0     +LDI R31 , HIGH ( 2 * _0x20000 + ( 77 ) )
                 	__POINTW1FN _0x20000,77
000233 940e 050b 	CALL SUBOPT_0x9
                 ; 0001 0044 		break;
                 ; 0001 0045 	default:
                 _0x2000D:
                 ; 0001 0046 		break;
                 ; 0001 0047 	}
                 _0x20008:
                 ; 0001 0048 	lcd_puts(lcd_buffer);
000235 c012      	RJMP _0x20C0004
                 ; 0001 0049 
                 ; 0001 004A 
                 ; 0001 004B 	memset(lcd_buffer,0,sizeof(lcd_buffer));
                 ; 0001 004C }
                 ; .FEND
                 ;
                 ;void Menu_About_Me(void)
                 ; 0001 004F {
                 _Menu_About_Me:
                 ; .FSTART _Menu_About_Me
                 ; 0001 0050 	lcd_gotoxy(0,0);
000236 940e 04b7 	CALL SUBOPT_0x0
                 ; 0001 0051 	sprintf(lcd_buffer," Cable Test V%02d ",Version);
                +
000238 e0e6     +LDI R30 , LOW ( 2 * _0x20000 + ( 94 ) )
000239 e0f1     +LDI R31 , HIGH ( 2 * _0x20000 + ( 94 ) )
                 	__POINTW1FN _0x20000,94
00023a 93fa      	ST   -Y,R31
00023b 93ea      	ST   -Y,R30
                +
00023c e0e1     +LDI R30 , LOW ( 0x1 )
00023d e0f0     +LDI R31 , HIGH ( 0x1 )
00023e e060     +LDI R22 , BYTE3 ( 0x1 )
00023f e070     +LDI R23 , BYTE4 ( 0x1 )
                 	__GETD1N 0x1
000240 940e 04ea 	CALL SUBOPT_0x4
                 ; 0001 0052 	lcd_puts(lcd_buffer);
                 ; 0001 0053 	lcd_gotoxy(0,1);
000242 940e 04d1 	CALL SUBOPT_0x2
                 ; 0001 0054 	sprintf(lcd_buffer,"      NSC      ");
                +
000244 e1e9     +LDI R30 , LOW ( 2 * _0x20000 + ( 113 ) )
000245 e0f1     +LDI R31 , HIGH ( 2 * _0x20000 + ( 113 ) )
                 	__POINTW1FN _0x20000,113
000246 940e 050b 	CALL SUBOPT_0x9
                 ; 0001 0055 	lcd_puts(lcd_buffer);
                 _0x20C0004:
000248 e8af      	LDI  R26,LOW(_lcd_buffer)
000249 e0b2      	LDI  R27,HIGH(_lcd_buffer)
00024a 940e 0477 	CALL _lcd_puts
                 ; 0001 0056 	memset(lcd_buffer,0,sizeof(lcd_buffer));
00024c 940e 04f9 	CALL SUBOPT_0x6
00024e 940e 0505 	CALL SUBOPT_0x8
                 ; 0001 0057 }
000250 9508      	RET
                 ; .FEND
                 ;
                 ;#include "cable.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;uint8_t Input[MAX_CABLE_PINS];
                 ;uint8_t Output[MAX_CABLE_PINS];
                 ;
                 ;uint8_t In_profile[MAX_NUMBER_PROFILE][MAX_CABLE_PINS];
                 ;uint8_t Out_profile[MAX_NUMBER_PROFILE][MAX_CABLE_PINS];
                 ;struct FUNC_HANDLE cable_func_handle;
                 ;struct FLAG flag;
                 ;uint8_t Cable_ID=0;
                 ;uint8_t Error_Cable[8];
                 ;char Error_Symbol[8];
                 ;
                 ;uint8_t (*Read_Pin)(void) = NULL;
                 ;void (*Port_Set)(uint8_t) = NULL;
                 ;void (*sleep_ms)(uint32_t) = NULL;
                 ;uint8_t (*profile_lcd_menu)(void) = NULL;
                 ;
                 ;
                 ;struct FUNC_HANDLE Profile_ID(void)
                 ; 0002 0015 {
                 
                 	.CSEG
                 ; 0002 0016     uint8_t Cable_ID;
                 ; 0002 0017     Cable_ID=(*profile_lcd_menu)();
                 ;	Cable_ID -> R17
                 ; 0002 0018     if(Cable_ID>MAX_NUMBER_PROFILE)
                 ; 0002 0019     {
                 ; 0002 001A         cable_func_handle.e_state=1;
                 ; 0002 001B         cable_func_handle.e_code=5;
                 ; 0002 001C         return cable_func_handle;
                 ; 0002 001D     }
                 ; 0002 001E     cable_func_handle.e_state=0;
                 ; 0002 001F     cable_func_handle.func_return_val=Cable_ID;
                 ; 0002 0020     return cable_func_handle;
                 ; 0002 0021 
                 ; 0002 0022 }
                 ;
                 ;void Cable_Check(void)
                 ; 0002 0025 {
                 ; 0002 0026     uint8_t i=0,j=0;
                 ; 0002 0027     memcpy(Input,In_profile[Cable_ID],sizeof(In_profile[Cable_ID]));
                 ;	i -> R17
                 ;	j -> R16
                 ; 0002 0028     memcpy(Output,Out_profile[Cable_ID],sizeof(Out_profile[Cable_ID]));
                 ; 0002 0029     for(i=0;i<sizeof(Output);i++)
                 ; 0002 002A     {
                 ; 0002 002B         (*Port_Set)(Output[i]);
                 ; 0002 002C         for(j=0;j<sizeof(Input);j++)
                 ; 0002 002D         {
                 ; 0002 002E             //(*sleep_ms)(1);
                 ; 0002 002F             if((*Read_Pin)()==Input[j])
                 ; 0002 0030             {
                 ; 0002 0031                 if(i!=j)
                 ; 0002 0032                 {
                 ; 0002 0033                     Error_Cable[i]=2+i;
                 ; 0002 0034                     flag.connect=1;
                 ; 0002 0035                 }
                 ; 0002 0036                 else if(i==j)
                 ; 0002 0037                 {
                 ; 0002 0038                     flag.connect=1;
                 ; 0002 0039                     Error_Cable[i]=0;
                 ; 0002 003A                 }
                 ; 0002 003B 
                 ; 0002 003C             }
                 ; 0002 003D             if((*Read_Pin)()>Input[j])
                 ; 0002 003E             {
                 ; 0002 003F                flag.connect=1;
                 ; 0002 0040                Error_Cable[i]=3+i;
                 ; 0002 0041             }
                 ; 0002 0042         }
                 ; 0002 0043         if(flag.connect==1)
                 ; 0002 0044         {
                 ; 0002 0045             flag.connect=0;
                 ; 0002 0046         }
                 ; 0002 0047         else if(flag.connect==0)
                 ; 0002 0048         {
                 ; 0002 0049              Error_Cable[i]=1;
                 ; 0002 004A              flag.notconnect=1;
                 ; 0002 004B         }
                 ; 0002 004C     }
                 ; 0002 004D 
                 ; 0002 004E }
                 ;
                 ;struct FUNC_HANDLE Cable_Error_Check(void)
                 ; 0002 0051 {
                 ; 0002 0052     uint8_t i=0;
                 ; 0002 0053     for(i=0;i<MAX_CABLE_PINS;i++)
                 ;	i -> R17
                 ; 0002 0054     {
                 ; 0002 0055         if(Error_Cable[i]==i+3)
                 ; 0002 0056         {
                 ; 0002 0057             Error_Symbol[i]='C';
                 ; 0002 0058         }
                 ; 0002 0059         else if(Error_Cable[i]==i+2)
                 ; 0002 005A         {
                 ; 0002 005B              Error_Symbol[i]= 'W';
                 ; 0002 005C         }
                 ; 0002 005D         else if(Error_Cable[i]==0)
                 ; 0002 005E         {
                 ; 0002 005F              Error_Symbol[i]= 'G';
                 ; 0002 0060         }
                 ; 0002 0061         else if(Error_Cable[i]==1)
                 ; 0002 0062         {
                 ; 0002 0063              Error_Symbol[i]= 'N';
                 ; 0002 0064         }
                 ; 0002 0065     }
                 ; 0002 0066     for(i=0;i<MAX_CABLE_PINS;i++)
                 ; 0002 0067     {
                 ; 0002 0068         if(Error_Symbol[i]!='G')
                 ; 0002 0069         {
                 ; 0002 006A             flag.test_result=0;
                 ; 0002 006B             cable_func_handle.e_state=1;
                 ; 0002 006C             cable_func_handle.e_code=6;
                 ; 0002 006D             cable_func_handle.func_return_val=0;
                 ; 0002 006E             return cable_func_handle;
                 ; 0002 006F         }
                 ; 0002 0070     }
                 ; 0002 0071     cable_func_handle.e_state=0;
                 ; 0002 0072     cable_func_handle.func_return_val=0;
                 ; 0002 0073     cable_func_handle.e_code=0;
                 ; 0002 0074     return cable_func_handle;
                 ; 0002 0075 }
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;#include "button_function.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;
                 ;struct FLAGS_B flags_b;
                 ;
                 ;uint8_t (*Read_Pin_B)(uint8_t,uint8_t)=NULL;
                 ;
                 ;
                 ;
                 ;void main_menu_button_manager_func(void)
                 ; 0003 000B {
                 
                 	.CSEG
                 ; 0003 000C     if(ENTER_BUTTON_PUSHED==1)
                 ; 0003 000D     {
                 ; 0003 000E         flags_b.enter=0;
                 ; 0003 000F         switch (Menue_Cable_Select_Num)
                 ; 0003 0010         {
                 ; 0003 0011         case RUN_TEST_PAGE:
                 ; 0003 0012             page=RUN_TEST_PAGE;
                 ; 0003 0013             break;
                 ; 0003 0014         case CABLE_SELSECT_PAGE:
                 ; 0003 0015             page=CABLE_SELSECT_PAGE;
                 ; 0003 0016             break;
                 ; 0003 0017         case CABLE_DEFINE_PAGE:
                 ; 0003 0018             page=CABLE_DEFINE_PAGE;
                 ; 0003 0019             break;
                 ; 0003 001A         case ABOUT_ME_PAGE:
                 ; 0003 001B             page=ABOUT_ME_PAGE;
                 ; 0003 001C             break;
                 ; 0003 001D         default:
                 ; 0003 001E             break;
                 ; 0003 001F         }
                 ; 0003 0020     }
                 ; 0003 0021     else if(UP_BUTTON_PUSHED==1)
                 ; 0003 0022     {
                 ; 0003 0023         flags_b.up=0;
                 ; 0003 0024         Menue_Cable_Select_Num++;
                 ; 0003 0025         if(Menue_Cable_Select_Num>=(MAX_MAIN_MENU_ITEM-1))
                 ; 0003 0026             Menue_Cable_Select_Num=0;
                 ; 0003 0027     }
                 ; 0003 0028     else if(DOWN_BUTTON_PUSHED==1)
                 ; 0003 0029     {
                 ; 0003 002A         flags_b.down=0;
                 ; 0003 002B         Menue_Cable_Select_Num--;
                 ; 0003 002C         if(Menue_Cable_Select_Num<0)
                 ; 0003 002D             Menue_Cable_Select_Num=(MAX_MAIN_MENU_ITEM-1);
                 ; 0003 002E     }
                 ; 0003 002F 
                 ; 0003 0030 }
                 ;
                 ;void cable_select_button_manager_func(void)
                 ; 0003 0033 {
                 ; 0003 0034     if(ENTER_BUTTON_PUSHED==1)
                 ; 0003 0035     {
                 ; 0003 0036         flags_b.enter=0;
                 ; 0003 0037         page=MAIN_PAGE;
                 ; 0003 0038     }
                 ; 0003 0039     else if(UP_BUTTON_PUSHED==1)
                 ; 0003 003A     {
                 ; 0003 003B         flags_b.up=0;
                 ; 0003 003C         Menue_Cable_Select_Num++;
                 ; 0003 003D         if(Menue_Cable_Select_Num>MAX_NUMBER_PROFILE)
                 ; 0003 003E            Menue_Cable_Select_Num=0;
                 ; 0003 003F     }
                 ; 0003 0040     else if(DOWN_BUTTON_PUSHED==1)
                 ; 0003 0041     {
                 ; 0003 0042         flags_b.down=0;
                 ; 0003 0043         Menue_Cable_Select_Num--;
                 ; 0003 0044         if(Menue_Cable_Select_Num<0)
                 ; 0003 0045             Menue_Cable_Select_Num=MAX_NUMBER_PROFILE;
                 ; 0003 0046     }
                 ; 0003 0047 }
                 ;
                 ;void cable_define_button_manager_func(void)
                 ; 0003 004A {
                 ; 0003 004B     if(ENTER_BUTTON_PUSHED==1)
                 ; 0003 004C     {
                 ; 0003 004D         flags_b.enter=0;
                 ; 0003 004E         if (flags_menu.subpage==IN_SELECT)
                 ; 0003 004F         {
                 ; 0003 0050            flags_menu.subpage=OUT_SELECT;
                 ; 0003 0051         }
                 ; 0003 0052         else if (flags_menu.subpage==OUT_SELECT)
                 ; 0003 0053         {
                 ; 0003 0054             flags_menu.subpage=PROF_SELECT;
                 ; 0003 0055         }
                 ; 0003 0056         else if(flags_menu.subpage==PROF_SELECT)
                 ; 0003 0057         {
                 ; 0003 0058             flags_menu.subpage=IN_SELECT;
                 ; 0003 0059         }
                 ; 0003 005A 
                 ; 0003 005B     }
                 ; 0003 005C     else if(UP_BUTTON_PUSHED==1)
                 ; 0003 005D     {
                 ; 0003 005E         flags_b.up=0;
                 ; 0003 005F         Menue_Cable_Select_Num++;
                 ; 0003 0060         if(Menue_Cable_Select_Num>MAX_NUMBER_PROFILE)
                 ; 0003 0061            Menue_Cable_Select_Num=0;
                 ; 0003 0062     }
                 ; 0003 0063     else if(DOWN_BUTTON_PUSHED==1)
                 ; 0003 0064     {
                 ; 0003 0065         flags_b.down=0;
                 ; 0003 0066         Menue_Cable_Select_Num--;
                 ; 0003 0067         if(Menue_Cable_Select_Num<0)
                 ; 0003 0068             Menue_Cable_Select_Num=MAX_NUMBER_PROFILE;
                 ; 0003 0069     }
                 ; 0003 006A     else if(EXIT_BUTTON_PUSHED==1)
                 ; 0003 006B     {
                 ; 0003 006C          flags_b.up=0;
                 ; 0003 006D           flags_b.down=0;
                 ; 0003 006E           page=MAIN_PAGE;
                 ; 0003 006F     }
                 ; 0003 0070 }
                 ;
                 ;void about_me_button_manager_func(void)
                 ; 0003 0073 {
                 ; 0003 0074     if(ENTER_BUTTON_PUSHED==1)
                 ; 0003 0075     {
                 ; 0003 0076          flags_b.enter=0;
                 ; 0003 0077         page=MAIN_PAGE;
                 ; 0003 0078     }
                 ; 0003 0079     else if(UP_BUTTON_PUSHED==1)
                 ; 0003 007A     {
                 ; 0003 007B          flags_b.up=0;
                 ; 0003 007C         page=MAIN_PAGE;
                 ; 0003 007D     }
                 ; 0003 007E     else if(DOWN_BUTTON_PUSHED==1)
                 ; 0003 007F     {
                 ; 0003 0080          flags_b.down=0;
                 ; 0003 0081         page=MAIN_PAGE;
                 ; 0003 0082     }
                 ; 0003 0083 
                 ; 0003 0084 
                 ; 0003 0085 }
                 ;
                 ;
                 ;/*
                 ;int8_t button_read(struct BUTTON_PORTS_PINS port)
                 ;{
                 ;    if((*Read_Pin_B)(port.b1_port,port.b1_pin)==PUSHED)
                 ;    {
                 ;         flags_b.enter=1;
                 ;    }
                 ;    if((*Read_Pin_B)(port.b2_port,port.b2_pin)==PUSHED)
                 ;    {
                 ;         flags_b.up=1;
                 ;    }
                 ;    if((*Read_Pin_B)(port.b3_port,port.b3_pin)==PUSHED)
                 ;    {
                 ;         flags_b.down=1;
                 ;    }
                 ;
                 ;}
                 ;*/
                 ;
                 ;
                 ;
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
000251 93ba      	ST   -Y,R27
000252 93aa      	ST   -Y,R26
000253 931a      	ST   -Y,R17
000254 930a      	ST   -Y,R16
000255 81aa      	LDD  R26,Y+2
000256 81bb      	LDD  R27,Y+2+1
000257 9612      	ADIW R26,2
000258 940e 0572 	CALL __GETW1P
00025a 9730      	SBIW R30,0
00025b f159      	BREQ _0x2000010
00025c 81aa      	LDD  R26,Y+2
00025d 81bb      	LDD  R27,Y+2+1
00025e 9614      	ADIW R26,4
00025f 940e 0572 	CALL __GETW1P
000261 018f      	MOVW R16,R30
000262 9730      	SBIW R30,0
000263 f061      	BREQ _0x2000012
                +
000264 3002     +CPI R16 , LOW ( 2 )
000265 e0e0     +LDI R30 , HIGH ( 2 )
000266 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000267 f098      	BRLO _0x2000013
000268 01f8      	MOVW R30,R16
000269 9731      	SBIW R30,1
00026a 018f      	MOVW R16,R30
                +
00026b 81aa     +LDD R26 , Y + 2
00026c 81bb     +LDD R27 , Y + 2 + 1
00026d 9614     +ADIW R26 , 4
00026e 93ed     +ST X + , R30
00026f 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
000270 81aa      	LDD  R26,Y+2
000271 81bb      	LDD  R27,Y+2+1
000272 9612      	ADIW R26,2
000273 91ed      	LD   R30,X+
000274 91fd      	LD   R31,X+
000275 9631      	ADIW R30,1
000276 93fe      	ST   -X,R31
000277 93ee      	ST   -X,R30
000278 9731      	SBIW R30,1
000279 81ac      	LDD  R26,Y+4
00027a 83a0      	STD  Z+0,R26
                 _0x2000013:
00027b 81aa      	LDD  R26,Y+2
00027c 81bb      	LDD  R27,Y+2+1
00027d 940e 0572 	CALL __GETW1P
00027f 23ff      	TST  R31
000280 f02a      	BRMI _0x2000014
000281 91ed      	LD   R30,X+
000282 91fd      	LD   R31,X+
000283 9631      	ADIW R30,1
000284 93fe      	ST   -X,R31
000285 93ee      	ST   -X,R30
                 _0x2000014:
000286 c006      	RJMP _0x2000015
                 _0x2000010:
000287 81aa      	LDD  R26,Y+2
000288 81bb      	LDD  R27,Y+2+1
000289 efef      	LDI  R30,LOW(65535)
00028a efff      	LDI  R31,HIGH(65535)
00028b 93ed      	ST   X+,R30
00028c 93fc      	ST   X,R31
                 _0x2000015:
00028d 8119      	LDD  R17,Y+1
00028e 8108      	LDD  R16,Y+0
00028f c176      	RJMP _0x20C0002
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
000290 93ba      	ST   -Y,R27
000291 93aa      	ST   -Y,R26
000292 9726      	SBIW R28,6
000293 940e 057f 	CALL __SAVELOCR6
000295 e010      	LDI  R17,0
000296 85ac      	LDD  R26,Y+12
000297 85bd      	LDD  R27,Y+12+1
000298 e0e0      	LDI  R30,LOW(0)
000299 e0f0      	LDI  R31,HIGH(0)
00029a 93ed      	ST   X+,R30
00029b 93fc      	ST   X,R31
                 _0x2000016:
00029c 89ea      	LDD  R30,Y+18
00029d 89fb      	LDD  R31,Y+18+1
00029e 9631      	ADIW R30,1
00029f 8bea      	STD  Y+18,R30
0002a0 8bfb      	STD  Y+18+1,R31
0002a1 9731      	SBIW R30,1
0002a2 91e4      	LPM  R30,Z
0002a3 2f2e      	MOV  R18,R30
0002a4 30e0      	CPI  R30,0
0002a5 f409      	BRNE PC+2
0002a6 c115      	RJMP _0x2000018
0002a7 2fe1      	MOV  R30,R17
0002a8 30e0      	CPI  R30,0
0002a9 f439      	BRNE _0x200001C
0002aa 3225      	CPI  R18,37
0002ab f411      	BRNE _0x200001D
0002ac e011      	LDI  R17,LOW(1)
0002ad c002      	RJMP _0x200001E
                 _0x200001D:
0002ae 940e 0512 	CALL SUBOPT_0xA
                 _0x200001E:
0002b0 c10a      	RJMP _0x200001B
                 _0x200001C:
0002b1 30e1      	CPI  R30,LOW(0x1)
0002b2 f4a9      	BRNE _0x200001F
0002b3 3225      	CPI  R18,37
0002b4 f419      	BRNE _0x2000020
0002b5 940e 0512 	CALL SUBOPT_0xA
0002b7 c102      	RJMP _0x20000CC
                 _0x2000020:
0002b8 e012      	LDI  R17,LOW(2)
0002b9 e040      	LDI  R20,LOW(0)
0002ba e000      	LDI  R16,LOW(0)
0002bb 322d      	CPI  R18,45
0002bc f411      	BRNE _0x2000021
0002bd e001      	LDI  R16,LOW(1)
0002be c0fc      	RJMP _0x200001B
                 _0x2000021:
0002bf 322b      	CPI  R18,43
0002c0 f411      	BRNE _0x2000022
0002c1 e24b      	LDI  R20,LOW(43)
0002c2 c0f8      	RJMP _0x200001B
                 _0x2000022:
0002c3 3220      	CPI  R18,32
0002c4 f411      	BRNE _0x2000023
0002c5 e240      	LDI  R20,LOW(32)
0002c6 c0f4      	RJMP _0x200001B
                 _0x2000023:
0002c7 c002      	RJMP _0x2000024
                 _0x200001F:
0002c8 30e2      	CPI  R30,LOW(0x2)
0002c9 f439      	BRNE _0x2000025
                 _0x2000024:
0002ca e050      	LDI  R21,LOW(0)
0002cb e013      	LDI  R17,LOW(3)
0002cc 3320      	CPI  R18,48
0002cd f411      	BRNE _0x2000026
0002ce 6800      	ORI  R16,LOW(128)
0002cf c0eb      	RJMP _0x200001B
                 _0x2000026:
0002d0 c003      	RJMP _0x2000027
                 _0x2000025:
0002d1 30e3      	CPI  R30,LOW(0x3)
0002d2 f009      	BREQ PC+2
0002d3 c0e7      	RJMP _0x200001B
                 _0x2000027:
0002d4 3320      	CPI  R18,48
0002d5 f010      	BRLO _0x200002A
0002d6 332a      	CPI  R18,58
0002d7 f008      	BRLO _0x200002B
                 _0x200002A:
0002d8 c007      	RJMP _0x2000029
                 _0x200002B:
0002d9 e0aa      	LDI  R26,LOW(10)
0002da 9f5a      	MUL  R21,R26
0002db 2d50      	MOV  R21,R0
0002dc 2fe2      	MOV  R30,R18
0002dd 53e0      	SUBI R30,LOW(48)
0002de 0f5e      	ADD  R21,R30
0002df c0db      	RJMP _0x200001B
                 _0x2000029:
0002e0 2fe2      	MOV  R30,R18
0002e1 36e3      	CPI  R30,LOW(0x63)
0002e2 f449      	BRNE _0x200002F
0002e3 940e 0519 	CALL SUBOPT_0xB
0002e5 89e8      	LDD  R30,Y+16
0002e6 89f9      	LDD  R31,Y+16+1
0002e7 81a4      	LDD  R26,Z+4
0002e8 93aa      	ST   -Y,R26
0002e9 940e 051f 	CALL SUBOPT_0xC
0002eb c0ce      	RJMP _0x2000030
                 _0x200002F:
0002ec 37e3      	CPI  R30,LOW(0x73)
0002ed f441      	BRNE _0x2000032
0002ee 940e 0519 	CALL SUBOPT_0xB
0002f0 940e 0525 	CALL SUBOPT_0xD
0002f2 940e 0408 	CALL _strlen
0002f4 2f1e      	MOV  R17,R30
0002f5 c00a      	RJMP _0x2000033
                 _0x2000032:
0002f6 37e0      	CPI  R30,LOW(0x70)
0002f7 f461      	BRNE _0x2000035
0002f8 940e 0519 	CALL SUBOPT_0xB
0002fa 940e 0525 	CALL SUBOPT_0xD
0002fc 940e 0414 	CALL _strlenf
0002fe 2f1e      	MOV  R17,R30
0002ff 6008      	ORI  R16,LOW(8)
                 _0x2000033:
000300 6002      	ORI  R16,LOW(2)
000301 770f      	ANDI R16,LOW(127)
000302 e030      	LDI  R19,LOW(0)
000303 c034      	RJMP _0x2000036
                 _0x2000035:
000304 36e4      	CPI  R30,LOW(0x64)
000305 f011      	BREQ _0x2000039
000306 36e9      	CPI  R30,LOW(0x69)
000307 f411      	BRNE _0x200003A
                 _0x2000039:
000308 6004      	ORI  R16,LOW(4)
000309 c002      	RJMP _0x200003B
                 _0x200003A:
00030a 37e5      	CPI  R30,LOW(0x75)
00030b f431      	BRNE _0x200003C
                 _0x200003B:
00030c e5e4      	LDI  R30,LOW(_tbl10_G100*2)
00030d e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
00030e 83ee      	STD  Y+6,R30
00030f 83ff      	STD  Y+6+1,R31
000310 e015      	LDI  R17,LOW(5)
000311 c00c      	RJMP _0x200003D
                 _0x200003C:
000312 35e8      	CPI  R30,LOW(0x58)
000313 f411      	BRNE _0x200003F
000314 6008      	ORI  R16,LOW(8)
000315 c003      	RJMP _0x2000040
                 _0x200003F:
000316 37e8      	CPI  R30,LOW(0x78)
000317 f009      	BREQ PC+2
000318 c0a1      	RJMP _0x2000071
                 _0x2000040:
000319 e5ee      	LDI  R30,LOW(_tbl16_G100*2)
00031a e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
00031b 83ee      	STD  Y+6,R30
00031c 83ff      	STD  Y+6+1,R31
00031d e014      	LDI  R17,LOW(4)
                 _0x200003D:
00031e ff02      	SBRS R16,2
00031f c014      	RJMP _0x2000042
000320 940e 0519 	CALL SUBOPT_0xB
000322 940e 052f 	CALL SUBOPT_0xE
000324 85ab      	LDD  R26,Y+11
000325 23aa      	TST  R26
000326 f43a      	BRPL _0x2000043
000327 85ea      	LDD  R30,Y+10
000328 85fb      	LDD  R31,Y+10+1
000329 940e 055a 	CALL __ANEGW1
00032b 87ea      	STD  Y+10,R30
00032c 87fb      	STD  Y+10+1,R31
00032d e24d      	LDI  R20,LOW(45)
                 _0x2000043:
00032e 3040      	CPI  R20,0
00032f f011      	BREQ _0x2000044
000330 5f1f      	SUBI R17,-LOW(1)
000331 c001      	RJMP _0x2000045
                 _0x2000044:
000332 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
000333 c004      	RJMP _0x2000046
                 _0x2000042:
000334 940e 0519 	CALL SUBOPT_0xB
000336 940e 052f 	CALL SUBOPT_0xE
                 _0x2000046:
                 _0x2000036:
000338 fd00      	SBRC R16,0
000339 c011      	RJMP _0x2000047
                 _0x2000048:
00033a 1715      	CP   R17,R21
00033b f478      	BRSH _0x200004A
00033c ff07      	SBRS R16,7
00033d c008      	RJMP _0x200004B
00033e ff02      	SBRS R16,2
00033f c004      	RJMP _0x200004C
000340 7f0b      	ANDI R16,LOW(251)
000341 2f24      	MOV  R18,R20
000342 5011      	SUBI R17,LOW(1)
000343 c001      	RJMP _0x200004D
                 _0x200004C:
000344 e320      	LDI  R18,LOW(48)
                 _0x200004D:
000345 c001      	RJMP _0x200004E
                 _0x200004B:
000346 e220      	LDI  R18,LOW(32)
                 _0x200004E:
000347 940e 0512 	CALL SUBOPT_0xA
000349 5051      	SUBI R21,LOW(1)
00034a cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
00034b 2f31      	MOV  R19,R17
00034c ff01      	SBRS R16,1
00034d c017      	RJMP _0x200004F
                 _0x2000050:
00034e 3030      	CPI  R19,0
00034f f0a1      	BREQ _0x2000052
000350 ff03      	SBRS R16,3
000351 c006      	RJMP _0x2000053
000352 81ee      	LDD  R30,Y+6
000353 81ff      	LDD  R31,Y+6+1
000354 9125      	LPM  R18,Z+
000355 83ee      	STD  Y+6,R30
000356 83ff      	STD  Y+6+1,R31
000357 c005      	RJMP _0x2000054
                 _0x2000053:
000358 81ae      	LDD  R26,Y+6
000359 81bf      	LDD  R27,Y+6+1
00035a 912d      	LD   R18,X+
00035b 83ae      	STD  Y+6,R26
00035c 83bf      	STD  Y+6+1,R27
                 _0x2000054:
00035d 940e 0512 	CALL SUBOPT_0xA
00035f 3050      	CPI  R21,0
000360 f009      	BREQ _0x2000055
000361 5051      	SUBI R21,LOW(1)
                 _0x2000055:
000362 5031      	SUBI R19,LOW(1)
000363 cfea      	RJMP _0x2000050
                 _0x2000052:
000364 c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
000365 e320      	LDI  R18,LOW(48)
000366 81ee      	LDD  R30,Y+6
000367 81ff      	LDD  R31,Y+6+1
000368 940e 0576 	CALL __GETW1PF
00036a 87e8      	STD  Y+8,R30
00036b 87f9      	STD  Y+8+1,R31
00036c 81ee      	LDD  R30,Y+6
00036d 81ff      	LDD  R31,Y+6+1
00036e 9632      	ADIW R30,2
00036f 83ee      	STD  Y+6,R30
000370 83ff      	STD  Y+6+1,R31
                 _0x200005A:
000371 85e8      	LDD  R30,Y+8
000372 85f9      	LDD  R31,Y+8+1
000373 85aa      	LDD  R26,Y+10
000374 85bb      	LDD  R27,Y+10+1
000375 17ae      	CP   R26,R30
000376 07bf      	CPC  R27,R31
000377 f050      	BRLO _0x200005C
000378 5f2f      	SUBI R18,-LOW(1)
000379 85a8      	LDD  R26,Y+8
00037a 85b9      	LDD  R27,Y+8+1
00037b 85ea      	LDD  R30,Y+10
00037c 85fb      	LDD  R31,Y+10+1
00037d 1bea      	SUB  R30,R26
00037e 0bfb      	SBC  R31,R27
00037f 87ea      	STD  Y+10,R30
000380 87fb      	STD  Y+10+1,R31
000381 cfef      	RJMP _0x200005A
                 _0x200005C:
000382 332a      	CPI  R18,58
000383 f028      	BRLO _0x200005D
000384 ff03      	SBRS R16,3
000385 c002      	RJMP _0x200005E
000386 5f29      	SUBI R18,-LOW(7)
000387 c001      	RJMP _0x200005F
                 _0x200005E:
000388 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
000389 fd04      	SBRC R16,4
00038a c01a      	RJMP _0x2000061
00038b 3321      	CPI  R18,49
00038c f420      	BRSH _0x2000063
00038d 85a8      	LDD  R26,Y+8
00038e 85b9      	LDD  R27,Y+8+1
00038f 9711      	SBIW R26,1
000390 f409      	BRNE _0x2000062
                 _0x2000063:
000391 c009      	RJMP _0x20000CD
                 _0x2000062:
000392 1753      	CP   R21,R19
000393 f010      	BRLO _0x2000067
000394 ff00      	SBRS R16,0
000395 c001      	RJMP _0x2000068
                 _0x2000067:
000396 c013      	RJMP _0x2000066
                 _0x2000068:
000397 e220      	LDI  R18,LOW(32)
000398 ff07      	SBRS R16,7
000399 c00b      	RJMP _0x2000069
00039a e320      	LDI  R18,LOW(48)
                 _0x20000CD:
00039b 6100      	ORI  R16,LOW(16)
00039c ff02      	SBRS R16,2
00039d c007      	RJMP _0x200006A
00039e 7f0b      	ANDI R16,LOW(251)
00039f 934a      	ST   -Y,R20
0003a0 940e 051f 	CALL SUBOPT_0xC
0003a2 3050      	CPI  R21,0
0003a3 f009      	BREQ _0x200006B
0003a4 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
0003a5 940e 0512 	CALL SUBOPT_0xA
0003a7 3050      	CPI  R21,0
0003a8 f009      	BREQ _0x200006C
0003a9 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
0003aa 5031      	SUBI R19,LOW(1)
0003ab 85a8      	LDD  R26,Y+8
0003ac 85b9      	LDD  R27,Y+8+1
0003ad 9712      	SBIW R26,2
0003ae f008      	BRLO _0x2000059
0003af cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
0003b0 ff00      	SBRS R16,0
0003b1 c008      	RJMP _0x200006D
                 _0x200006E:
0003b2 3050      	CPI  R21,0
0003b3 f031      	BREQ _0x2000070
0003b4 5051      	SUBI R21,LOW(1)
0003b5 e2e0      	LDI  R30,LOW(32)
0003b6 93ea      	ST   -Y,R30
0003b7 940e 051f 	CALL SUBOPT_0xC
0003b9 cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
0003ba e010      	LDI  R17,LOW(0)
                 _0x200001B:
0003bb cee0      	RJMP _0x2000016
                 _0x2000018:
0003bc 85ac      	LDD  R26,Y+12
0003bd 85bd      	LDD  R27,Y+12+1
0003be 940e 0572 	CALL __GETW1P
0003c0 940e 0586 	CALL __LOADLOCR6
0003c2 9664      	ADIW R28,20
0003c3 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
0003c4 92ff      	PUSH R15
0003c5 2ef8      	MOV  R15,R24
0003c6 9726      	SBIW R28,6
0003c7 940e 0581 	CALL __SAVELOCR4
0003c9 940e 0537 	CALL SUBOPT_0xF
0003cb 9730      	SBIW R30,0
0003cc f419      	BRNE _0x2000072
0003cd efef      	LDI  R30,LOW(65535)
0003ce efff      	LDI  R31,HIGH(65535)
0003cf c023      	RJMP _0x20C0003
                 _0x2000072:
0003d0 01de      	MOVW R26,R28
0003d1 9616      	ADIW R26,6
0003d2 940e 0556 	CALL __ADDW2R15
0003d4 018d      	MOVW R16,R26
0003d5 940e 0537 	CALL SUBOPT_0xF
0003d7 83ee      	STD  Y+6,R30
0003d8 83ff      	STD  Y+6+1,R31
0003d9 e0e0      	LDI  R30,LOW(0)
0003da 87e8      	STD  Y+8,R30
0003db 87e9      	STD  Y+8+1,R30
0003dc 01de      	MOVW R26,R28
0003dd 961a      	ADIW R26,10
0003de 940e 0556 	CALL __ADDW2R15
0003e0 940e 0572 	CALL __GETW1P
0003e2 93fa      	ST   -Y,R31
0003e3 93ea      	ST   -Y,R30
0003e4 931a      	ST   -Y,R17
0003e5 930a      	ST   -Y,R16
0003e6 e5e1      	LDI  R30,LOW(_put_buff_G100)
0003e7 e0f2      	LDI  R31,HIGH(_put_buff_G100)
0003e8 93fa      	ST   -Y,R31
0003e9 93ea      	ST   -Y,R30
0003ea 01de      	MOVW R26,R28
0003eb 961a      	ADIW R26,10
0003ec dea3      	RCALL __print_G100
0003ed 019f      	MOVW R18,R30
0003ee 81ae      	LDD  R26,Y+6
0003ef 81bf      	LDD  R27,Y+6+1
0003f0 e0e0      	LDI  R30,LOW(0)
0003f1 93ec      	ST   X,R30
0003f2 01f9      	MOVW R30,R18
                 _0x20C0003:
0003f3 940e 0588 	CALL __LOADLOCR4
0003f5 962a      	ADIW R28,10
0003f6 90ff      	POP  R15
0003f7 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _memset:
                 ; .FSTART _memset
0003f8 93ba      	ST   -Y,R27
0003f9 93aa      	ST   -Y,R26
0003fa 81b9          ldd  r27,y+1
0003fb 81a8          ld   r26,y
0003fc 9610          adiw r26,0
0003fd f031          breq memset1
0003fe 81fc          ldd  r31,y+4
0003ff 81eb          ldd  r30,y+3
000400 816a          ldd  r22,y+2
                 memset0:
000401 9361          st   z+,r22
000402 9711          sbiw r26,1
000403 f7e9          brne memset0
                 memset1:
000404 81eb          ldd  r30,y+3
000405 81fc          ldd  r31,y+4
                 _0x20C0002:
000406 9625      	ADIW R28,5
000407 9508      	RET
                 ; .FEND
                 _strlen:
                 ; .FSTART _strlen
000408 93ba      	ST   -Y,R27
000409 93aa      	ST   -Y,R26
00040a 91a9          ld   r26,y+
00040b 91b9          ld   r27,y+
00040c 27ee          clr  r30
00040d 27ff          clr  r31
                 strlen0:
00040e 916d          ld   r22,x+
00040f 2366          tst  r22
000410 f011          breq strlen1
000411 9631          adiw r30,1
000412 cffb          rjmp strlen0
                 strlen1:
000413 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000414 93ba      	ST   -Y,R27
000415 93aa      	ST   -Y,R26
000416 27aa          clr  r26
000417 27bb          clr  r27
000418 91e9          ld   r30,y+
000419 91f9          ld   r31,y+
                 strlenf0:
00041a 9005      	lpm  r0,z+
00041b 2000          tst  r0
00041c f011          breq strlenf1
00041d 9611          adiw r26,1
00041e cffb          rjmp strlenf0
                 strlenf1:
00041f 01fd          movw r30,r26
000420 9508          ret
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G103:
                 ; .FSTART __lcd_write_nibble_G103
000421 93aa      	ST   -Y,R26
000422 b3eb      	IN   R30,0x1B
000423 70ef      	ANDI R30,LOW(0xF)
000424 2fae      	MOV  R26,R30
000425 81e8      	LD   R30,Y
000426 7fe0      	ANDI R30,LOW(0xF0)
000427 2bea      	OR   R30,R26
000428 bbeb      	OUT  0x1B,R30
                +
000429 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00042a 958a     +DEC R24
00042b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00042c 9ada      	SBI  0x1B,2
                +
00042d e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00042e 958a     +DEC R24
00042f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000430 98da      	CBI  0x1B,2
                +
000431 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000432 958a     +DEC R24
000433 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000434 c080      	RJMP _0x20C0001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000435 93aa      	ST   -Y,R26
000436 81a8      	LD   R26,Y
000437 dfe9      	RCALL __lcd_write_nibble_G103
000438 81e8          ld    r30,y
000439 95e2          swap  r30
00043a 83e8          st    y,r30
00043b 81a8      	LD   R26,Y
00043c dfe4      	RCALL __lcd_write_nibble_G103
                +
00043d e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
00043e 958a     +DEC R24
00043f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000440 c074      	RJMP _0x20C0001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000441 93aa      	ST   -Y,R26
000442 81e8      	LD   R30,Y
000443 e0f0      	LDI  R31,0
000444 55ed      	SUBI R30,LOW(-__base_y_G103)
000445 4ffd      	SBCI R31,HIGH(-__base_y_G103)
000446 81e0      	LD   R30,Z
000447 81a9      	LDD  R26,Y+1
000448 0fae      	ADD  R26,R30
000449 dfeb      	RCALL __lcd_write_data
00044a 80a9      	LDD  R10,Y+1
00044b 81e8      	LD   R30,Y
00044c 93e0 02a7 	STS  __lcd_y,R30
00044e 9622      	ADIW R28,2
00044f 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000450 e0a2      	LDI  R26,LOW(2)
000451 940e 053e 	CALL SUBOPT_0x10
000453 e0ac      	LDI  R26,LOW(12)
000454 dfe0      	RCALL __lcd_write_data
000455 e0a1      	LDI  R26,LOW(1)
000456 940e 053e 	CALL SUBOPT_0x10
000458 e0e0      	LDI  R30,LOW(0)
000459 93e0 02a7 	STS  __lcd_y,R30
00045b 2eae      	MOV  R10,R30
00045c 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
00045d 93aa      	ST   -Y,R26
00045e 81a8      	LD   R26,Y
00045f 30aa      	CPI  R26,LOW(0xA)
000460 f021      	BREQ _0x2060005
000461 91e0 02a8 	LDS  R30,__lcd_maxx
000463 16ae      	CP   R10,R30
000464 f060      	BRLO _0x2060004
                 _0x2060005:
000465 e0e0      	LDI  R30,LOW(0)
000466 93ea      	ST   -Y,R30
000467 91a0 02a7 	LDS  R26,__lcd_y
000469 5faf      	SUBI R26,-LOW(1)
00046a 93a0 02a7 	STS  __lcd_y,R26
00046c dfd4      	RCALL _lcd_gotoxy
00046d 81a8      	LD   R26,Y
00046e 30aa      	CPI  R26,LOW(0xA)
00046f f409      	BRNE _0x2060007
000470 c044      	RJMP _0x20C0001
                 _0x2060007:
                 _0x2060004:
000471 94a3      	INC  R10
000472 9ad8      	SBI  0x1B,0
000473 81a8      	LD   R26,Y
000474 dfc0      	RCALL __lcd_write_data
000475 98d8      	CBI  0x1B,0
000476 c03e      	RJMP _0x20C0001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000477 93ba      	ST   -Y,R27
000478 93aa      	ST   -Y,R26
000479 931a      	ST   -Y,R17
                 _0x2060008:
00047a 81a9      	LDD  R26,Y+1
00047b 81ba      	LDD  R27,Y+1+1
00047c 91ed      	LD   R30,X+
00047d 83a9      	STD  Y+1,R26
00047e 83ba      	STD  Y+1+1,R27
00047f 2f1e      	MOV  R17,R30
000480 30e0      	CPI  R30,0
000481 f019      	BREQ _0x206000A
000482 2fa1      	MOV  R26,R17
000483 dfd9      	RCALL _lcd_putchar
000484 cff5      	RJMP _0x2060008
                 _0x206000A:
000485 8118      	LDD  R17,Y+0
000486 9623      	ADIW R28,3
000487 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000488 93aa      	ST   -Y,R26
000489 b3ea      	IN   R30,0x1A
00048a 6fe0      	ORI  R30,LOW(0xF0)
00048b bbea      	OUT  0x1A,R30
00048c 9ad2      	SBI  0x1A,2
00048d 9ad0      	SBI  0x1A,0
00048e 9ad1      	SBI  0x1A,1
00048f 98da      	CBI  0x1B,2
000490 98d8      	CBI  0x1B,0
000491 98d9      	CBI  0x1B,1
000492 81e8      	LD   R30,Y
000493 93e0 02a8 	STS  __lcd_maxx,R30
000495 58e0      	SUBI R30,-LOW(128)
                +
000496 93e0 02a5+STS __base_y_G103 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G103,2
000498 81e8      	LD   R30,Y
000499 54e0      	SUBI R30,-LOW(192)
                +
00049a 93e0 02a6+STS __base_y_G103 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G103,3
00049c e1a4      	LDI  R26,LOW(20)
00049d e0b0      	LDI  R27,0
00049e 940e 054c 	CALL _delay_ms
0004a0 940e 0544 	CALL SUBOPT_0x11
0004a2 940e 0544 	CALL SUBOPT_0x11
0004a4 940e 0544 	CALL SUBOPT_0x11
0004a6 e2a0      	LDI  R26,LOW(32)
0004a7 df79      	RCALL __lcd_write_nibble_G103
                +
0004a8 ec88     +LDI R24 , LOW ( 200 )
0004a9 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0004aa 9701     +SBIW R24 , 1
0004ab f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0004ac e2a8      	LDI  R26,LOW(40)
0004ad df87      	RCALL __lcd_write_data
0004ae e0a4      	LDI  R26,LOW(4)
0004af df85      	RCALL __lcd_write_data
0004b0 e8a5      	LDI  R26,LOW(133)
0004b1 df83      	RCALL __lcd_write_data
0004b2 e0a6      	LDI  R26,LOW(6)
0004b3 df81      	RCALL __lcd_write_data
0004b4 df9b      	RCALL _lcd_clear
                 _0x20C0001:
0004b5 9621      	ADIW R28,1
0004b6 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _In_profile:
000160           	.BYTE 0x60
                 _Out_profile:
0001c0           	.BYTE 0x60
                 _cable_func_handle:
000220           	.BYTE 0x2
                 _flag:
000222           	.BYTE 0x2
                 _Cable_ID:
000224           	.BYTE 0x1
                 _Error_Cable:
000225           	.BYTE 0x8
                 _Error_Symbol:
00022d           	.BYTE 0x8
                 _Input:
000235           	.BYTE 0x8
                 _Output:
00023d           	.BYTE 0x8
                 _profile_lcd_menu:
000245           	.BYTE 0x2
                 _Port_Set:
000247           	.BYTE 0x2
                 _Read_Pin:
000249           	.BYTE 0x2
                 _Menue_Cable_Select_Num:
00024b           	.BYTE 0x1
                 _flags_menu:
00024c           	.BYTE 0x1
                 _page:
00024d           	.BYTE 0x1
                 _flags_b:
00024e           	.BYTE 0x1
                 _Menue_Main_Srting:
00024f           	.BYTE 0x40
                 _lcd_buffer:
00028f           	.BYTE 0x10
                 __seed_G101:
00029f           	.BYTE 0x4
                 __base_y_G103:
0002a3           	.BYTE 0x4
                 __lcd_y:
0002a7           	.BYTE 0x1
                 __lcd_maxx:
0002a8           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x0:
0004b7 e0e0      	LDI  R30,LOW(0)
0004b8 93ea      	ST   -Y,R30
0004b9 e0a0      	LDI  R26,LOW(0)
0004ba 940e 0441 	CALL _lcd_gotoxy
0004bc e8ef      	LDI  R30,LOW(_lcd_buffer)
0004bd e0f2      	LDI  R31,HIGH(_lcd_buffer)
0004be 93fa      	ST   -Y,R31
0004bf 93ea      	ST   -Y,R30
0004c0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x1:
0004c1 940e 055e 	CALL __LSLW4
0004c3 5be1      	SUBI R30,LOW(-_Menue_Main_Srting)
0004c4 4ffd      	SBCI R31,HIGH(-_Menue_Main_Srting)
0004c5 2766      	CLR  R22
0004c6 2777      	CLR  R23
0004c7 940e 057a 	CALL __PUTPARD1
0004c9 e084      	LDI  R24,4
0004ca 940e 03c4 	CALL _sprintf
0004cc 9628      	ADIW R28,8
0004cd e8af      	LDI  R26,LOW(_lcd_buffer)
0004ce e0b2      	LDI  R27,HIGH(_lcd_buffer)
0004cf 940c 0477 	JMP  _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x2:
0004d1 e0e0      	LDI  R30,LOW(0)
0004d2 93ea      	ST   -Y,R30
0004d3 e0a1      	LDI  R26,LOW(1)
0004d4 940e 0441 	CALL _lcd_gotoxy
0004d6 e8ef      	LDI  R30,LOW(_lcd_buffer)
0004d7 e0f2      	LDI  R31,HIGH(_lcd_buffer)
0004d8 93fa      	ST   -Y,R31
0004d9 93ea      	ST   -Y,R30
0004da 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3:
0004db e8ef      	LDI  R30,LOW(_lcd_buffer)
0004dc e0f2      	LDI  R31,HIGH(_lcd_buffer)
0004dd 93fa      	ST   -Y,R31
0004de 93ea      	ST   -Y,R30
0004df e0e0      	LDI  R30,LOW(0)
0004e0 93ea      	ST   -Y,R30
0004e1 e1a0      	LDI  R26,LOW(16)
0004e2 e0b0      	LDI  R27,0
0004e3 940e 03f8 	CALL _memset
0004e5 91e0 0222 	LDS  R30,_flag
0004e7 70e8      	ANDI R30,LOW(0x8)
0004e8 30e8      	CPI  R30,LOW(0x8)
0004e9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x4:
0004ea 940e 057a 	CALL __PUTPARD1
0004ec e084      	LDI  R24,4
0004ed 940e 03c4 	CALL _sprintf
0004ef 9628      	ADIW R28,8
0004f0 e8af      	LDI  R26,LOW(_lcd_buffer)
0004f1 e0b2      	LDI  R27,HIGH(_lcd_buffer)
0004f2 940c 0477 	JMP  _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
0004f4 2de7      	MOV  R30,R7
0004f5 e0f0      	LDI  R31,0
0004f6 940e 0560 	CALL __LSLW3
0004f8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x6:
0004f9 e8ef      	LDI  R30,LOW(_lcd_buffer)
0004fa e0f2      	LDI  R31,HIGH(_lcd_buffer)
0004fb 93fa      	ST   -Y,R31
0004fc 93ea      	ST   -Y,R30
0004fd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
0004fe 91ec      	LD   R30,X
0004ff 27ff      	CLR  R31
000500 2766      	CLR  R22
000501 2777      	CLR  R23
000502 940e 057a 	CALL __PUTPARD1
000504 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
000505 e0e0      	LDI  R30,LOW(0)
000506 93ea      	ST   -Y,R30
000507 e1a0      	LDI  R26,LOW(16)
000508 e0b0      	LDI  R27,0
000509 940c 03f8 	JMP  _memset
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x9:
00050b 93fa      	ST   -Y,R31
00050c 93ea      	ST   -Y,R30
00050d e080      	LDI  R24,0
00050e 940e 03c4 	CALL _sprintf
000510 9624      	ADIW R28,4
000511 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0xA:
000512 932a      	ST   -Y,R18
000513 85ad      	LDD  R26,Y+13
000514 85be      	LDD  R27,Y+13+1
000515 85ef      	LDD  R30,Y+15
000516 89f8      	LDD  R31,Y+15+1
000517 9509      	ICALL
000518 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xB:
000519 89e8      	LDD  R30,Y+16
00051a 89f9      	LDD  R31,Y+16+1
00051b 9734      	SBIW R30,4
00051c 8be8      	STD  Y+16,R30
00051d 8bf9      	STD  Y+16+1,R31
00051e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xC:
00051f 85ad      	LDD  R26,Y+13
000520 85be      	LDD  R27,Y+13+1
000521 85ef      	LDD  R30,Y+15
000522 89f8      	LDD  R31,Y+15+1
000523 9509      	ICALL
000524 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xD:
000525 89a8      	LDD  R26,Y+16
000526 89b9      	LDD  R27,Y+16+1
000527 9614      	ADIW R26,4
000528 940e 0572 	CALL __GETW1P
00052a 83ee      	STD  Y+6,R30
00052b 83ff      	STD  Y+6+1,R31
00052c 81ae      	LDD  R26,Y+6
00052d 81bf      	LDD  R27,Y+6+1
00052e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xE:
00052f 89a8      	LDD  R26,Y+16
000530 89b9      	LDD  R27,Y+16+1
000531 9614      	ADIW R26,4
000532 940e 0572 	CALL __GETW1P
000534 87ea      	STD  Y+10,R30
000535 87fb      	STD  Y+10+1,R31
000536 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
000537 01de      	MOVW R26,R28
000538 961c      	ADIW R26,12
000539 940e 0556 	CALL __ADDW2R15
00053b 940e 0572 	CALL __GETW1P
00053d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x10:
00053e 940e 0435 	CALL __lcd_write_data
000540 e0a3      	LDI  R26,LOW(3)
000541 e0b0      	LDI  R27,0
000542 940c 054c 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x11:
000544 e3a0      	LDI  R26,LOW(48)
000545 940e 0421 	CALL __lcd_write_nibble_G103
                +
000547 ec88     +LDI R24 , LOW ( 200 )
000548 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000549 9701     +SBIW R24 , 1
00054a f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00054b 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00054c 9610      	adiw r26,0
00054d f039      	breq __delay_ms1
                 __delay_ms0:
00054e 95a8      	wdr
                +
00054f ed80     +LDI R24 , LOW ( 0x7D0 )
000550 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000551 9701     +SBIW R24 , 1
000552 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000553 9711      	sbiw r26,1
000554 f7c9      	brne __delay_ms0
                 __delay_ms1:
000555 9508      	ret
                 
                 __ADDW2R15:
000556 2400      	CLR  R0
000557 0daf      	ADD  R26,R15
000558 1db0      	ADC  R27,R0
000559 9508      	RET
                 
                 __ANEGW1:
00055a 95f1      	NEG  R31
00055b 95e1      	NEG  R30
00055c 40f0      	SBCI R31,0
00055d 9508      	RET
                 
                 __LSLW4:
00055e 0fee      	LSL  R30
00055f 1fff      	ROL  R31
                 __LSLW3:
000560 0fee      	LSL  R30
000561 1fff      	ROL  R31
                 __LSLW2:
000562 0fee      	LSL  R30
000563 1fff      	ROL  R31
000564 0fee      	LSL  R30
000565 1fff      	ROL  R31
000566 9508      	RET
                 
                 __CBD1:
000567 2ffe      	MOV  R31,R30
000568 0fff      	ADD  R31,R31
000569 0bff      	SBC  R31,R31
00056a 2f6f      	MOV  R22,R31
00056b 2f7f      	MOV  R23,R31
00056c 9508      	RET
                 
                 __CWD1:
00056d 2f6f      	MOV  R22,R31
00056e 0f66      	ADD  R22,R22
00056f 0b66      	SBC  R22,R22
000570 2f76      	MOV  R23,R22
000571 9508      	RET
                 
                 __GETW1P:
000572 91ed      	LD   R30,X+
000573 91fc      	LD   R31,X
000574 9711      	SBIW R26,1
000575 9508      	RET
                 
                 __GETW1PF:
000576 9005      	LPM  R0,Z+
000577 91f4      	LPM  R31,Z
000578 2de0      	MOV  R30,R0
000579 9508      	RET
                 
                 __PUTPARD1:
00057a 937a      	ST   -Y,R23
00057b 936a      	ST   -Y,R22
00057c 93fa      	ST   -Y,R31
00057d 93ea      	ST   -Y,R30
00057e 9508      	RET
                 
                 __SAVELOCR6:
00057f 935a      	ST   -Y,R21
                 __SAVELOCR5:
000580 934a      	ST   -Y,R20
                 __SAVELOCR4:
000581 933a      	ST   -Y,R19
                 __SAVELOCR3:
000582 932a      	ST   -Y,R18
                 __SAVELOCR2:
000583 931a      	ST   -Y,R17
000584 930a      	ST   -Y,R16
000585 9508      	RET
                 
                 __LOADLOCR6:
000586 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000587 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000588 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000589 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00058a 8119      	LDD  R17,Y+1
00058b 8108      	LD   R16,Y
00058c 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16A register use summary:
r0 :  13 r1 :   3 r2 :   0 r3 :   0 r4 :   3 r5 :   0 r6 :   2 r7 :   2 
r8 :   1 r9 :   2 r10:   4 r11:   1 r12:   0 r13:   0 r14:   0 r15:   6 
r16:  34 r17:  24 r18:  29 r19:   8 r20:   9 r21:  17 r22:  20 r23:   9 
r24:  28 r25:   7 r26: 133 r27:  50 r28:  17 r29:   1 r30: 323 r31: 121 
x  :  24 y  : 225 z  :  18 
Registers used: 29 out of 35 (82.9%)

ATmega16A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   5 add   :   9 
adiw  :  30 and   :   0 andi  :  11 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  18 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   0 brmi  :   1 brne  :  40 brpl  :   1 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  97 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  17 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   4 cpc   :   8 cpi   :  40 cpse  :   0 dec   :   5 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   5 inc   :   1 jmp   :  26 ld    :  42 ldd   :  81 ldi   : 175 
lds   :  13 lpm   :  14 lsl   :   4 lsr   :   0 mov   :  27 movw  :  18 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :  13 out   :  27 pop   :   1 push  :   1 rcall :  18 ret   :  38 
reti  :   2 rjmp  :  71 rol   :   4 ror   :   0 sbc   :   3 sbci  :   7 
sbi   :   6 sbic  :   0 sbis  :   3 sbiw  :  21 sbr   :   0 sbrc  :   3 
sbrs  :  11 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   1 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    : 101 std   :  31 sts   :  27 sub   :   1 subi  :  22 swap  :   1 
tst   :   4 wdr   :   1 
Instructions used: 59 out of 116 (50.9%)

ATmega16A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000b1a   2588    254   2842   16384  17.3%
[.dseg] 0x000060 0x0002a9      0    329    329    1024  32.1%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 13 warnings
